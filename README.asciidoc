JST - Java Simple Template
==========================

JST is a simple template engine which use Java as its programming language and produces Java files to be called anywhere from your code.

Why Yet Another Template Engine ?
---------------------------------

Lot's of template engines try to enforce the MVC pattern (Model View Controller) by limitting the algorithmic features of the language used in the templates. Whereas MVC is definitively a good pattern to avoid writing messy software, the philosophy of JST is to let to the developper the responsability to making the separation of the model and the view, not the template engine.

Unlike some template engine, JST is only targeted to the Java environment. The goal is to have a better integration between a business model and the view. Since both are of the same enviroment, they can shares types, and refactoring can be done more easily.

JST can be compared to JSP. But JST doesn't need you to run in a J2EE framework, JST is just about plain Java.

It can be also be compared to the template engine from Playframework 2, since a JST template produces a class callable from your code. But JST don't need a framework, and don't need scala.

The syntax of JST is quite closed to the Velocity one, because it is a nicely concise syntax. But unlike Velocity, JST is typed and properly scoped, no weird side effect is sight.

Last but not least, JST is based on Xtext. Which means an Eclipse editor is already available for use, with syntax coloring, semantic highlighting, compilation error reporting, refactoring.

TODO
----

- escaping: there is currently no escaping when outputing data in an html template.
- while, do-while: these loops are not yet implemented
- for(inst; condition; increm): currently for loops can only iterate on +Iterable+s (+for(item : list)+)
- add a #abstracttemplate: same as #template, but generate an abstract method
- add a #call render(args...): should be a synonym of #( render(out, args...); )
- add a servlet option: PrintStream out would come from the HttpServletResponse and HttpServletRequest would be available in the template

Template Language
-----------------

NB: the programming lnaguage is based on Xbase which a language close to Java, see http://www.eclipse.org/Xtext/documentation.html#xbaseLanguageRef_Introduction

The minimum: define a rendering method in your template
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--------------------------------------
#template renderHello()
  Hello World
#end
--------------------------------------

- +#template+ defines a new rendering funtion.
- +myrenderfunction+ is the name of the method to be called from your Java code.
- +()+ is then the list or arguments of your rendering method, here empty.
- +#end+ defines when the rendering of the current method ends.

Outputing expressions
~~~~~~~~~~~~~~~~~~~~~

In the outputed content, juste use +$(aJavaExpression)+. And to output an empty string rather than 'null' on null values, use +$!(aMaybeNullExpression)+

Exemple:
--------------------------------------
#template renderHello(String name)
  Hello $(name) !
#end
--------------------------------------

Outputting +#+ or +$+
~~~~~~~~~~~~~~~~~~~~~

Just double the letters: +##+ and +$$+

Exemple:
--------------------------------------
#template renderAccount(int account, int amount)
  Account ##$(account) owns $(amount)$$
#end
--------------------------------------

Scripting
~~~~~~~~~

To declare variables or just do some Java code, do it within +#(...)+

Exemple:
--------------------------------------
#template renderHello(String name)
  #( var hello = "Hello " + name.trim() + " !" )
  $(hello)
#end
--------------------------------------

Java Imports
~~~~~~~~~~~~

At the begining of your template, just do like you would do in plain Java, declares your imports.

Exemple:
--------------------------------------
import java.util.List;
#template renderSize(List list)
  List size is $(list.size())
#end
--------------------------------------

Loops
~~~~~

Loops are like in Java but with the keywords +#for+ and +#end+

Exemple:
--------------------------------------
import java.util.List
#template renderList(List list)
  <ul>
  #for (item : list)
    <li>$(item)</li>
  #end
  <ul>
#end
--------------------------------------

Branching
~~~~~~~~~

To do branching, just like in Java but with the keywords +#if+, +#else+, +#elseif+ and +#end+.

Exemple:
--------------------------------------
import java.util.List
#template renderSize(List list)
  #if (list == null)
    The list is null
  #elseif(list.isEmpty())
    The list is empty
  #elseif(list.size() == 1)
    The list contains one element
  #else
    The list contains $(list.size()) elements
  #end
#end
--------------------------------------

Template Class
~~~~~~~~~~~~~~

The JST engine will generate a plain Java class named after the template file name. The file name is appended with JstTemplate and the first letter is capitalized to build the name of the generated class. For instance +user.jst+ will generate +UserJstTemplate.java+.

Template Class Hierarchy
^^^^^^^^^^^^^^^^^^^^^^^^

The generated class can implement some interfaces and extend classes. After declaring the imports, the declaration of the template's hierachy is like in java but with the keyword +template+ and without the need to name it.

Exemple:
--------------------------------------
import java.io.Serializable;
import java.util.ArrayList;

template extends ArrayList implements Serializable;

#template renderHello()
  Hello World
#end
--------------------------------------

Abstract Template Class
^^^^^^^^^^^^^^^^^^^^^^^

A template class can also be asbtract. The keyword +abstract+ in front of the keyword +template+ make the class abstract.

Exemple:
--------------------------------------
abstract template;

#template renderHello()
  Hello World
#end
--------------------------------------

Fields and Methods
^^^^^^^^^^^^^^^^^^

Fields and methods can be defined on the template class. It is just regular Java.

Exemple:
--------------------------------------
import java.io.File;

private File path;

private void setPath(File path) {
  this.path = path;
}

#template renderPath()
  $(path.getAbsolutePath())
#end
--------------------------------------

Layout pattern
~~~~~~~~~~~~~~

When working with templates, some are designed to be layouts of some other templates. With JST, no special keyword or contruction is required, just use the Java class hierarchy. The template layout will be an abstract template, and the layouted template will extend it.

Exemple:

- layout.jst
--------------------------------------
import java.util.List;
abstract template;
abstract void renderItem(PrintStream out, String item);
#template render(List<String> list)
  <ul>
  #for(item : list)
    <li>#( renderItem(out, item); )</li>
  #end
  </ul>
#end
--------------------------------------
- item.jst
--------------------------------------
template extends LayoutJstTemplate;
#template renderItem(String item)
  <i>$(item)</i>
#end
--------------------------------------
