JST - Java Simple Template
==========================

JST is a simple template engine which use Java as its programming language and produces Java files to be called anywhere from your code.

Why Yet Another Template Engine ?
---------------------------------

Lot's of template engines try to enforce the MVC pattern (Model View Controller) by limitting the algorithmic features of the language used in the templates. Whereas MVC is definitively a good pattern to avoid writing messy software, the philosophy of JST is to let to the developper the responsability to making the separation of the model and the view, not the template engine.

Unlike some template engine, JST is only targeted to the Java environment. The goal is to have a better integration between a business model and the view. Since both are of the same enviroment, they can shares types, and refactoring can be done more easily.

JST can be compared to JSP. But JST doesn't need you to run in a J2EE framework, JST is just about plain Java.

It can be also be compared to the template engine from Playframework 2, since a JST template produces a class callable from your code. But JST don't need a framework, and don't need scala.

The syntax of JST is quite closed to the Velocity one, because it is a nicely concise syntax. But unlike Velocity, JST is typed and properly scoped, no weird side effect in sight.

Last but not least, JST is based on Xtext. Which means an Eclipse editor is already available for use, with syntax coloring, semantic highlighting, compilation error reporting, refactoring.

TODO
----

- for(inst; condition; increm): currently for loops can only iterate on +Iterable+ (+for(item : list)+)

IDEAS
-----
- add a servlet option: the Writer would come from the HttpServletResponse and HttpServletRequest would be available in the template
- try catch support ? a renderer cannot thow anything else than IOException for now.

Continuous Integration Build
----------------------------

Build can be found there: https://travis-ci.org/nlalevee/jst

Status: image:https://secure.travis-ci.org/nlalevee/jst.png?branch=master

Dependencies
------------

Once generated, the templates need at runtime:

- commons-lang 2.6
- guava 10
- org.eclipse.xtext.xbase.lib 2.4
- org.hibnet.jst.runtime

Template Language
-----------------

NB: the programming language is based on Xbase which is not Java but is close to it. For further documentation about that language, see http://www.eclipse.org/Xtext/documentation.html#xbaseLanguageRef_Introduction

A quick Tour
~~~~~~~~~~~~

The smalest template
^^^^^^^^^^^^^^^^^^^^

Here is the bare minimum you need to have a working template which display 'Hello World'

--------------------------------------
#main
  Hello World
#end
--------------------------------------

- +#main+ defines the main rendering function.
- +#end+ defines when it ends.

A more complete template
^^^^^^^^^^^^^^^^^^^^^^^^

--------------------------------------
package com.acme;

import java.util.List;
import java.text.SimpleDateFormat;
import org.springframework.beans.factory.InitializingBean;

template implements InitializingBean;

List<String> names;
Date date;

#main
    <p>Today is $(new SimpleDateFormat("YYYY/MM/dd").format(date))</p>
    <ul>Hello guys:
        #for(String name : names)
            <li>#call name(name)</li>
        #end
    </ul>
#end

#def name(String n)
  <b>$(n)</b>
#end
--------------------------------------

In this exemple, we have first the package declaration: the package in which the Java classes will generated.

Then the Java-like +import+, to avoid fully qualifying classes along the template.

+template+ then defines general options on the tempalte and the template Java class hierarchy.

Then there are some fields declared as part of the tempalte class. It is the way of declaring arguments to the +main+ renderer. In this section can also be defined methods.

The +#main+ defines the mandatory entry point of a template. Its body defines how it should be rendered.

In the body of the +main+ renderer, +$(...)+ is outputing the java expression, +#for+ is a loop a java collection, and +#call+ is a call to an inner renderer.

An finally there is the definition of the inner renderer called +name+.

Definition of an inner renderer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The +main+ renderer is the entry point to render a template. It may be useful to define some other rendering function to be called from the same one, to factorize pieces of the template.

An inner renderer is comparable to a private function of a class. Contrary to the +main+ renderer, it accepts arguments.

Exemple:
--------------------------------------
#def paragraph()
  <p>Some content</p>
#end
--------------------------------------

Outputing expressions
~~~~~~~~~~~~~~~~~~~~~

In the outputed content, just use +$(aJavaExpression)+. And to output an empty string rather than +null+ on null values, use +$?(aMaybeNullExpression)+

Exemple:
--------------------------------------
#def hello(String name)
  Hello $(name) !
#end
--------------------------------------

Outputting +#+ or +$+
~~~~~~~~~~~~~~~~~~~~~

Just double the letters: +##+ and +$$+

Exemple:
--------------------------------------
#def account(int account, int amount)
  Account ##$(account) owns $(amount)$$
#end
--------------------------------------

Escaping and unescaping
~~~~~~~~~~~~~~~~~~~~~~~

When rendering variables into the template, you may want to render your variables in the proper encoding of your generated files. For instance, chevrons should be replaced by +&lt;+ and +&gt;+ in html files. Each expression can be escaped individualy, it overrides the global escaping.

Several encodings are available:

- XML: use +$\xml(...)+ or +$?\xml(...)+
- HTML: use +$\html(...)+ or +$?\html(...)+
- JavaScript: use +$\js(...)+ or +$?\js(...)+
- Java: use +$\java(...)+ or +$?\java(...)+
- CSV: use +$\csv(...)+ or +$?\csv(...)+
- SQL: use +$\sql(...)+ or +$?\sql(...)+

You can also disable the global escaping and output your expression in a raw format. For that, use +$\\(...)+ or +$?\\(...)+

Exemple:
--------------------------------------
#def content(String name, String htmlData, String script)
<html><body>
  Hello $\html(name) !
  <p>$\\(htmlData)</p>
  <script>
  $?\js(script)
  </script>
</body></html>
#end
--------------------------------------

Default escaping
^^^^^^^^^^^^^^^^

Rather than escaping each output, every output can be escaped with a default escaping method. This can be set in two ways:

- the escape method wil be inferred from the JST file name. For instance, +mytemplate.html.jst+ will be default escpaped as +html+, or +mytemplate.js.jst+ will be default encoded as +js+.
- use the template options: at the begining of the template file, declare +template with escape = 'js'+

Scripting
~~~~~~~~~

To declare variables or just do some Java code, do it within +#{...}+

Exemple:
--------------------------------------
#def hello(String name)
  #{ var hello = "Hello " + name.trim() + " !" }
  $(hello)
#end
--------------------------------------

Java Imports
~~~~~~~~~~~~

At the begining of your template, just do like you would do in plain Java, declares your imports.

Exemple:
--------------------------------------
import java.util.List;
#def size(List list)
  List size is $(list.size())
#end
--------------------------------------

Loops
~~~~~

Loops are like in Java but with the keywords +#for+, +#while+ or +#do+, together with +#end+

Exemple:
--------------------------------------
import java.util.List
#def list(List list)
  <ul>
  #for (item : list)
    <li>$(item)</li>
  #end
  <ul>
  <ol>
  #{ var count = 0; }
  #while(count < list.size())
    <li>$(count) : $(list.get(count))</li>
    #{ count = count + 1; }
  #end
  </ol>
  <pre>
  #{ var count2 = 0; }
  #do
    -- $(count2) : $(list.get(count2))</li>
    #{ count2 = count2 + 1; }
  #end #while(count2 < list.size())
  </pre>
#end
--------------------------------------

Branching
~~~~~~~~~

To do branching, just like in Java but with the keywords +#if+, +#else+, +#elseif+ and +#end+.

Exemple:
--------------------------------------
import java.util.List
#def size(List list)
  #if (list == null)
    The list is null
  #elseif(list.isEmpty())
    The list is empty
  #elseif(list.size() == 1)
    The list contains one element
  #else
    The list contains $(list.size()) elements
  #end
#end
--------------------------------------

Package
~~~~~~~

By default the java class generated will be in the default package, ie the root one. You can specify the package in which it will be generated with teh keyword +package+.

Exemple:
--------------------------------------
package org.acme;

#def hello()
  Hello World
#end
--------------------------------------

Note that the JST engine doesn't care about where the jst template is placed. You can place it in a java classpath in a proper package, or just randomly put in some folder. Only the +package+ directive and the name of the file specifies the java class to generate. And actually the jst file is useless at runtime, you don't need to embed it into your jar, you just need the compiled class of the generated Java file.

Template Class
~~~~~~~~~~~~~~

The JST engine will generate a plain Java class named after the template file name. The file name is appended with JstTemplate and the first letter is capitalized to build the name of the generated class. For instance +user.jst+ will generate +UserJstTemplate.java+.

Template Class Hierarchy
^^^^^^^^^^^^^^^^^^^^^^^^

The generated class can implement some interfaces and extend classes. After declaring the imports, the declaration of the template's hierachy is like in java but with the keyword +template+ and without the need to name it.

Exemple:
--------------------------------------
import java.io.Serializable;
import java.util.ArrayList;

template extends ArrayList implements Serializable;

#def hello()
  Hello World
#end
--------------------------------------

Abstract Template Class
^^^^^^^^^^^^^^^^^^^^^^^

A template class can also be asbtract. The keyword +abstract+ in front of the keyword +template+ make the class abstract.

Exemple:
--------------------------------------
abstract template;

#def hello()
  Hello World
#end
--------------------------------------

Fields and Methods
^^^^^^^^^^^^^^^^^^

Fields and methods can be defined on the template class. It is just regular Java.

Exemple:
--------------------------------------
import java.io.File;

private File path;

public void setPath(File path) {
  this.path = path;
}

#def path()
  $(path.getAbsolutePath())
#end
--------------------------------------

Renderer call
~~~~~~~~~~~~~

Within a renderer, another renderer can be called with the directive +#call+. The syntax is like a function call in Java.

Exemple:
--------------------------------------
#def hello()
  Hello
  #call name("World")
#end
#def name(String n)
  $(n)
#end
--------------------------------------

Abstract Renderer
~~~~~~~~~~~~~~~~~

As the template class, a renderer can be declared abstract. Just add the keyword +abstract+.

Exemple:
--------------------------------------
abstract template;
#def body(List<String> list)
  <ul>
  #for(i : list)
    <li>#call item(i)</li>
  #end
  </ul>
#end
#def abstract item(String i)
--------------------------------------

Template Options
~~~~~~~~~~~~~~~~

Options are available to modify globally the rendering methods. They are defined in the header of the template, on the line which defines the template. After the keyword +with+ comes a comma separated list of keys and values.

The supported options are:

- +escape+: defines how inline expressions should be escaped by default. Expected value: +''xml''+, +''html''+, +''js''+, +''java''+, +''csv''+, or +''sql''+.
- +servlet+: changes the signature of the rendering method to accept an HttpServletRequest and an HttpServletResponse as parameters. Expected value: +true+ or +false+.

Exemple:
--------------------------------------
template with escape = 'html', servlet = true;
#def hello()
  Hello World !
#end
--------------------------------------

Layout pattern
~~~~~~~~~~~~~~

When working with templates, some are designed to be layouts and some other contents. With JST, no special keyword or contruction is required, just use the Object Oriented patterns: composition and inheritance.

Since the layout should not know about how the actual content should be rendered and vise versa, the interface +JstTemplate+ common to every Jst template will be used. And since it is the layout template which specifies where to put the content, it will be the entry point to render the full page.

Exemple:

- layout.html.jst
--------------------------------------
public JstTemplate contentTemplate;
#main
<html>
  <body>
    <h1>My website</h1>
    ${ contentTemplate.render(out); }
  </body>
</html>
#end
--------------------------------------
- content1.html.jst
--------------------------------------
#main
  <p>Hello World !</p>
#end
--------------------------------------
- content2.html.jst
--------------------------------------
String name;

#main
  <p>Hello $(name) !</p>
#end
--------------------------------------
- Main.java
--------------------------------------
public class Main {
  public static void main(String[] args) {
    LayoutJstTemplate content1 = new LayoutJstTemplate();
    content1.contentTemplate = new Content1JstTemplate();
    content1.render(new OutputStreamWriter(System.out));

    LayoutJstTemplate content2 = new LayoutJstTemplate();
    content2.contentTemplate = new Content2JstTemplate();
    content2.contentTemplate.name = "Nico";
    content2.render(new OutputStreamWriter(System.out));
  }
}
--------------------------------------
