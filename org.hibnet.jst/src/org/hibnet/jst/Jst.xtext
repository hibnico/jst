/*******************************************************************************
 * Copyright (c) 2012 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 ******************************************************************************/
grammar org.hibnet.jst.Jst with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate jst "http://www.hibnet.org/jst/Jst"
import 'http://www.eclipse.org/xtext/xbase/Xbase' as xbase
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

JstFile:
		(DIRECTIVE_PACKAGE package=QualifiedName)?
		imports+=Import*
		functions+=Function*
;

Import:
	DIRECTIVE_IMPORT importedNamespace=QualifiedName
;

Function:
    DIRECTIVE_FUNCTION name=ID BRACE_OPEN params=Parameters? BRACE_CLOSE
    body=RichString
    DIRECTIVE_END
;

Parameters:
    params+=Parameter (COMMA params+=Parameter)*
;

Parameter:
	type=JvmTypeReference name=ID
;

RichString returns xbase::XBlockExpression:
	{RichString}
	expressions+=RichStringPart*
;

RichStringPart returns xbase::XExpression:
      RichStringLiteral
	| RichStringScript
    | RichStringInlineExpr
	| RichStringForLoop
	| RichStringIf
;

RichStringLiteral returns xbase::XStringLiteral:
    {RichStringLiteral} value=TEXT
;

RichStringScript returns xbase::XExpression:
    {XBlockExpression}
    DIRECTIVE BRACE_OPEN (expressions+=XExpressionInsideBlock ';'?)* BRACE_CLOSE
;

RichStringForLoop returns xbase::XForLoopExpression:
	{RichStringForLoop}
	DIRECTIVE_FOR BRACE_OPEN declaredParam=JvmFormalParameter COLON forExpression=XExpression BRACE_CLOSE
		eachExpression=RichString
	DIRECTIVE_END
;

RichStringIf returns xbase::XIfExpression:
	{RichStringIf}
	DIRECTIVE_IF BRACE_OPEN if=XExpression BRACE_CLOSE
		then=RichString
	(else=RichStringElseIf | DIRECTIVE_ELSE else=RichString)?
    DIRECTIVE_END
;

RichStringElseIf returns xbase::XIfExpression:
	{RichStringIf}
	DIRECTIVE_ELSEIF BRACE_OPEN if=XExpression BRACE_CLOSE
		then=RichString
	(else=RichStringElseIf | DIRECTIVE_ELSE else=RichString)?
;

RichStringInlineExpr returns xbase::XExpression:
    {RichStringInlineExpr}
    elvis=(DIRECTIVE_ECHO | DIRECTIVE_ECHO_ELVIS) BRACE_OPEN expr=XExpression BRACE_CLOSE
;

terminal ML_COMMENT:
    DIRECTIVE_ML_COMMENT_START -> DIRECTIVE_ML_COMMENT_END
;

terminal SL_COMMENT:
    DIRECTIVE_SL_COMMENT !('\n'|'\r')* ('\r'? '\n')?
;

terminal INT returns ecore::EInt:
    '0'..'9' ('0'..'9'|'_')*; 

terminal DECIMAL:
    INT 
    (('e'|'E') ('+'|'-')? INT)? 
    (('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;

terminal WS: (' '|'\t'|'\r'|'\n')+;

terminal BRACE_OPEN: '(';
terminal BRACE_CLOSE: ')';
terminal COMMA: ',';
terminal COLON: ':';

terminal DIRECTIVE_PACKAGE: '#package';
terminal DIRECTIVE_IMPORT: '#import';
terminal DIRECTIVE_FUNCTION: '#function';
terminal DIRECTIVE_IF: '#if';
terminal DIRECTIVE_ELSE: '#else';
terminal DIRECTIVE_ELSEIF: '#elseif';
terminal DIRECTIVE_END: '#end';
terminal DIRECTIVE_FOR: '#for';
terminal DIRECTIVE_SL_COMMENT: '#--';
terminal DIRECTIVE_ML_COMMENT_START: '#-';
terminal DIRECTIVE_ML_COMMENT_END: '-#';
terminal DIRECTIVE: '#';
terminal DIRECTIVE_ECHO: '$';
terminal DIRECTIVE_ECHO_ELVIS: '$!';

terminal TEXT:
// we fake the generated parser so it never match it and we can handle it ourself
    '\uAAAA'
// actual expected form:
//    ( (!('#'|'$')) | '##' | '$$')*
;
