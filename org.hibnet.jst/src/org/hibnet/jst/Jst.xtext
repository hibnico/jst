/*
 *  Copyright 2012 JST contributors
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
grammar org.hibnet.jst.Jst with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate jst "http://www.hibnet.org/jst/Jst"
import 'http://www.eclipse.org/xtext/xbase/Xbase' as xbase
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

JstFile returns types::JvmGenericType:
    {JstFile}
    ('package' packageName=QualifiedName ';')?
    imports+=Import*
    ( abstract?=ABSTRACT? 'template'
         ('extends' superTypes+=JvmParameterizedTypeReference)?
         ('implements' superTypes+=JvmParameterizedTypeReference (',' superTypes+=JvmParameterizedTypeReference)* )?
         ('with' options+=JstOption (',' options+=JstOption)*)?
         ';'
    )?
    (
        members+=Field
      | members+=Method
      | renderers+=Renderer
      | renderers+=AbstractRenderer
    )*
;

JstOption:
    key=ValidID '=' value=JstOptionValue
;

JstOptionValue returns xbase::XExpression:
    XBooleanLiteral |
    XNumberLiteral |
    XNullLiteral |
    XStringLiteral
;

Import:
    'import' static?='static'? (importedNamespace=QualifiedName | importedNamespace=QualifiedNameWithWildCard) ';'
;

Field returns types::JvmField:
    {Field}
    (fieldAnnotations+=XAnnotation)* (visibility=Visibility? & static?='static'? & final?='final'?) type=JvmTypeReference simpleName=ID ('=' initialValue=XExpression)? ';'
;

Method returns types::JvmOperation:
    {Method}
    (methodAnnotations+=XAnnotation)*
    (visibility=Visibility? & (static?='static' | abstract?=ABSTRACT)? )
    ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
    returnType=JvmTypeReference simpleName=ID
    PARENTHESE_OPEN (parameters+=JvmFormalParameter (',' parameters+=JvmFormalParameter)*)? PARENTHESE_CLOSE
    ('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
    expression=XBlockExpression
;

enum Visibility returns types::JvmVisibility:
    PUBLIC = 'public' | PROTECTED = 'protected' | PRIVATE = 'private';


//////////////////////////////////
// Renderer things
//////////////////////////////////

Renderer:
    DIRECTIVE_RENDERER simpleName=RendererID PARENTHESE_OPEN (parameters+=RendererParameter (',' parameters+=RendererParameter)*)? PARENTHESE_CLOSE
    expression=RichString
    DIRECTIVE_END
;

AbstractRenderer returns Renderer:
    {AbstractRenderer}
    DIRECTIVE_RENDERER ABSTRACT simpleName=RendererID PARENTHESE_OPEN (parameters+=RendererParameter (',' parameters+=RendererParameter)*)? PARENTHESE_CLOSE
;

RendererParameter:
    (parameterType=JvmTypeReference)? name=ValidID;

RichString returns xbase::XBlockExpression:
    {RichString}
    ( expressions+=RichStringPart
        | startScript+=DIRECTIVE_SCRIPT (expressions+=XExpressionInsideBlock ';')* endScript+=CURLY_BRACKET_CLOSE
    )*
;

RichStringPart returns xbase::XExpression:
      RichStringLiteral
    | RichStringInlineExpr
    | RichStringForLoop
    | RichStringWhileLoop
    | RichStringDoWhileLoop
    | RichStringIf
    | RichStringRender
    | RichStringTemplateRender
;

RichStringLiteral returns xbase::XStringLiteral:
    {RichStringLiteral} value=(TEXT | SHARP | DOLLAR)
;

RichStringInlineExpr returns xbase::XExpression:
    {RichStringInlineExpr}
    (   DIRECTIVE_ECHO
      | elvis?=DIRECTIVE_ECHO_ELVIS
      | escape=DIRECTIVE_ECHO_ESCAPE
      | elvisEscape=DIRECTIVE_ECHO_ELVIS_ESCAPE
      | unescape?=DIRECTIVE_ECHO_UNESCAPE
      | elvisUnescape?=DIRECTIVE_ECHO_ELVIS_UNESCAPE
    )
    expr=XExpression PARENTHESE_CLOSE
;

RichStringForLoop returns xbase::XForLoopExpression:
    {RichStringForLoop}
    DIRECTIVE_FOR declaredParam=JvmFormalParameter ':' forExpression=XExpression PARENTHESE_CLOSE
        eachExpression=RichString
    DIRECTIVE_END
;

RichStringWhileLoop returns xbase::XWhileExpression:
    {RichStringWhileLoop}
    DIRECTIVE_WHILE predicate=XExpression PARENTHESE_CLOSE
        body=RichString
    DIRECTIVE_END
;

RichStringDoWhileLoop returns xbase::XDoWhileExpression:
    {RichStringDoWhileLoop}
    DIRECTIVE_DO
        body=RichString
    DIRECTIVE_END DIRECTIVE_WHILE predicate=XExpression PARENTHESE_CLOSE
;

RichStringIf returns xbase::XIfExpression:
    {RichStringIf}
    DIRECTIVE_IF if=XExpression PARENTHESE_CLOSE
        then=RichString
    (else=RichStringElseIf | DIRECTIVE_ELSE else=RichString)?
    DIRECTIVE_END
;

RichStringElseIf returns xbase::XIfExpression:
    {RichStringIf}
    DIRECTIVE_ELSEIF if=XExpression PARENTHESE_CLOSE
        then=RichString
    (else=RichStringElseIf | DIRECTIVE_ELSE else=RichString)?
;

RichStringRender:
    DIRECTIVE_RENDER feature=[types::JvmIdentifiableElement|RendererValidID]
         PARENTHESE_OPEN (featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)* )? PARENTHESE_CLOSE
;

RichStringTemplateRender:
    DIRECTIVE_RENDER memberCallTarget=XPrimaryExpression '.' feature=[types::JvmIdentifiableElement|RendererValidID]
         PARENTHESE_OPEN (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? PARENTHESE_CLOSE
;

QualifiedNameWithWildCard :
    QualifiedName  '.' '*';

RendererID:
    ID
;

RendererValidID:
    ValidID
;

ValidID:
    ID;

terminal PARENTHESE_OPEN: '(';
terminal PARENTHESE_CLOSE: ')';
terminal CURLY_BRACKET_OPEN: '{';
terminal CURLY_BRACKET_CLOSE: '}';

terminal ABSTRACT: 'abstract';

terminal DOLLAR: '$$';
terminal SHARP: '##';

terminal DIRECTIVE_RENDERER: '#renderer';
terminal DIRECTIVE_IF: '#if(';
terminal DIRECTIVE_ELSE: '#else';
terminal DIRECTIVE_ELSEIF: '#elseif(';
terminal DIRECTIVE_END: '#end';
terminal DIRECTIVE_FOR: '#for(';
terminal DIRECTIVE_WHILE: '#while(';
terminal DIRECTIVE_DO: '#do';
terminal DIRECTIVE_RENDER: '#render';
terminal DIRECTIVE_SCRIPT: '#{';
terminal DIRECTIVE_ECHO: '$(';
terminal DIRECTIVE_ECHO_ELVIS: '$?(';
terminal DIRECTIVE_ECHO_UNESCAPE: '$\\\\(';
terminal DIRECTIVE_ECHO_ELVIS_UNESCAPE: '$?\\\\(';
terminal DIRECTIVE_ECHO_ESCAPE: '$\\' ('a'..'z')+ '(';
terminal DIRECTIVE_ECHO_ELVIS_ESCAPE: '$?\\' ('a'..'z')+ '(';

// redefinition of ID, the default conflicts with $$
terminal ID:
    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

terminal TEXT:
// we fake the generated parser so it never match it and we can handle it ourself
    '\u10FFFF'
// actual expected form:
//    ( (!('#'|'$')) | '##' | '$$')*
;
